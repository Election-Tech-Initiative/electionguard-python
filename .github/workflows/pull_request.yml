name: Validate Pull Request

on: [pull_request, repository_dispatch]

env:
  PYTHON_VERSION: 3.8
  CODE_COVERAGE: 90 #TODO Raise coverage to 100

jobs:
  linux_check:
    name: Linux Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install gmpy2 requirements (GMP, MPFR, MPC)
        run: |
          sudo apt-get install libgmp-dev
          sudo apt-get install libmpfr-dev
          sudo apt-get install libmpc-dev
      - name: Install pipenv
        run: pip install pipenv
      - name: Install dev dependencies
        run: pipenv install --dev
      - name: Change Directory
        run: cd ${{ github.workspace }}
      - name: Install package
        run: pipenv run python -m pip install -e .
      - name: Check linting with Pylint
        run: pipenv run pylint .
      - name: Check formatting with Black
        continue-on-error: true #TODO Remove black check bypass
        run: pipenv run black --check .
      - name: Check package metadata
        continue-on-error: true #TODO Remove package metadata check bypass
        run: pipenv run python setup.py check --strict --metadata --restructuredtext
      - name: Check static typing with mypy
        continue-on-error: true #TODO Remove mypy check bypass
        run: pipenv run mypy bench src stubs tests setup.py
      - name: Test package import
        run: pipenv run python -c 'import electionguard; print(electionguard.__package__ + " imported")'
      - name: Run tests and check coverage
        run: |
          pipenv run coverage run -m pytest
          pipenv run coverage report --fail-under=${{env.CODE_COVERAGE}}
          pipenv run coverage erase
      - name: Install and Run Tox
        continue-on-error: true #TODO Remove tox check bypass
        run: |
          pip install tox tox-gh-actions
          tox
  mac_check:
    name: MacOS Check
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install gmpy2 requirements (GMP)
        run: brew install gmp
      - name: Install pipenv
        run: pip install pipenv
      - name: Install dev dependencies
        run: pipenv install --dev
      - name: Change Directory
        run: cd ${{ github.workspace }}
      - name: Install package
        run: pipenv run python -m pip install -e .
      - name: Check linting with Pylint
        run: pipenv run pylint .
      - name: Check formatting with Black
        continue-on-error: true #TODO Remove black check bypass
        run: pipenv run black --check .
      - name: Check package metadata
        continue-on-error: true #TODO Remove package metadata check bypass
        run: pipenv run python setup.py check --strict --metadata --restructuredtext
      - name: Check static typing with mypy
        continue-on-error: true #TODO Remove mypy check bypass
        run: pipenv run mypy bench src stubs tests setup.py
      - name: Test package import
        run: pipenv run python -c 'import electionguard; print(electionguard.__package__ + " imported")'
      - name: Run tests and check coverage
        run: |
          pipenv run coverage run -m pytest
          pipenv run coverage report --fail-under=${{env.CODE_COVERAGE}}
          pipenv run coverage erase
      - name: Install and Run Tox
        continue-on-error: true #TODO Remove tox check bypass
        run: |
          pip install tox tox-gh-actions
          tox
  windows_check:
    name: Windows Check
    runs-on: windows-latest
    env: 
      PIP_FIND_LINKS: "packages/gmpy2-2.0.8-cp38-cp38-win_amd64.whl"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pipenv
        run: pip install pipenv
      - name: Install dev dependencies
        run: pipenv install --dev
      - name: Change Directory
        run: cd ${{ github.workspace }}
      - name: Install package
        run: pipenv run python -m pip install -e .
      - name: Check linting with Pylint
        run: pipenv run pylint .
      - name: Check formatting with Black
        continue-on-error: true #TODO Remove black check bypass
        run: pipenv run black --check .
      - name: Check package metadata
        continue-on-error: true #TODO Remove package metadata check bypass
        run: pipenv run python setup.py check --strict --metadata --restructuredtext
      - name: Check static typing with mypy
        continue-on-error: true #TODO Remove mypy check bypass
        run: pipenv run mypy bench src stubs tests setup.py
      - name: Test package import
        run: pipenv run python -c "import electionguard; print(electionguard.__package__ + ' imported');"
      - name: Run tests
        continue-on-error: true #TODO Remove Window tests bypass
        run: pipenv run pytest -x
